CREATE TABLE ARTIST(
 ARTIST_ID VARCHAR(50) PRIMARY KEY,
 ARTIST_NAME VARCHAR(255),
 IMG_URL1 VARCHAR(100),
 IMG_URL2 VARCHAR(100),
 IMG_URL3 VARCHAR(100),
 MONTHLY_LISTENERS INTEGER(20));

CREATE TABLE BELONGS_TO(
  ARTIST_ID VARCHAR(50),
  FOREIGN KEY(ARTIST_ID) REFERENCES ARTIST(ARTIST_ID) ON DELETE CASCADE,
  ALBUM_ID VARCHAR(50),
  FOREIGN KEY(ALBUM_ID) REFERENCES ALBUM(ALBUM_ID) ON DELETE CASCADE,
  PRIMARY KEY(ARTIST_ID,ALBUM_ID)
)

CREATE TABLE ALBUM(
 ALBUM_ID VARCHAR(50) PRIMARY KEY,
 IMG_URL1 VARCHAR(100),
 IMG_URL2 VARCHAR(100),
 IMG_URL3 VARCHAR(100),
 REL_DATE VARCHAR(255),
 TOTAL_TRACKS INTEGER(30),
 TOTAL_DURATION INTEGER(50)
 album_name VARCHAR (255));

CREATE TABLE HASGENRE(
 ALBUM_ID VARCHAR(50), 
 FOREIGN KEY(ALBUM_ID) REFERENCES ALBUM(ALBUM_ID) ON DELETE CASCADE,
 GENRE VARCHAR(30),
 PRIMARY KEY(ALBUM_ID,GENRE));

CREATE TABLE SONG(
 SONG_ID VARCHAR(50) PRIMARY KEY,
 ALBUM_ID VARCHAR(50),
 FOREIGN KEY(ALBUM_ID) REFERENCES ALBUM(ALBUM_ID) ON DELETE CASCADE,
 SONG_NAME VARCHAR(255),
 IMG_URL1 VARCHAR(100),
 IMG_URL2 VARCHAR(100),
 IMG_URL3 VARCHAR(100),
 VIDEO_ID VARCHAR(255));

CREATE TABLE PERFORMED_BY(
 SONG_ID VARCHAR(50),
 FOREIGN KEY(SONG_ID) REFERENCES SONG(SONG_ID) ON DELETE CASCADE,
 ARTIST_ID VARCHAR(50),
 FOREIGN KEY(ARTIST_ID) REFERENCES ARTIST(ARTIST_ID) ON DELETE CASCADE,
 PRIMARY KEY(SONG_ID,ARTIST_ID));

CREATE TABLE PLAYLIST_HAS (
    PLAY_ID INT UNSIGNED,
    SONG_ID VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
    PRIMARY KEY (SONG_ID, PLAY_ID),
    TRACK_NO INTEGER,
    FOREIGN KEY (PLAY_ID) REFERENCES PLAYLIST(PLAY_ID) ON DELETE CASCADE,
    FOREIGN KEY (SONG_ID) REFERENCES SONG(SONG_ID) ON DELETE CASCADE
);

CREATE TABLE USERS (
  USERNAME VARCHAR(255) NOT NULL,
  HPASSWORD VARCHAR(255) NOT NULL,
  EMAIL VARCHAR(255) PRIMARY KEY);

CREATE TABLE PLAYLIST(
 PLAY_ID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
 EMAIL VARCHAR(255),
 FOREIGN KEY(EMAIL) REFERENCES USERS(EMAIL) ON DELETE CASCADE,
 TOTAL_TRACKS INTEGER(30),
 PLAY_NAME VARCHAR(50));


 
ALTER TABLE SONG MODIFY COLUMN SONG_NAME VARCHAR(255) CHARACTER SET utf8mb4;
ALTER TABLE SONG MODIFY COLUMN VIDEO_ID VARCHAR(255) CHARACTER SET utf8mb4;
ALTER TABLE album MODIFY COLUMN album_name VARCHAR(255) CHARACTER SET utf8mb4;
ALTER TABLE ARTIST MODIFY COLUMN ARTIST_NAME VARCHAR(255) CHARACTER SET utf8mb4;

ALTER TABLE ALBUM MODIFY COLUMN REL_DATE VARCHAR(255);
//
TO REMOVE ALL DATA
TRUNCATE TABLE BELONGS_TO;
TRUNCATE TABLE PERFORMED_BY;
TRUNCATE TABLE SONG;
TRUNCATE TABLE HASGENRE;
TRUNCATE TABLE ALBUM;
TRUNCATE TABLE ARTIST;

INSERT INTO PLAYLIST (EMAIL, TOTAL_TRACKS, PLAY_NAME) VALUES ('hello', 0, 'My Playlist 1');
INSERT INTO PLAYLIST (EMAIL, TOTAL_TRACKS, PLAY_NAME) VALUES ('hello', 0, 'My Playlist 2');
INSERT INTO PLAYLIST (EMAIL, TOTAL_TRACKS, PLAY_NAME) VALUES ('hello', 0, 'My Playlist 3');

INSERT INTO PLAYLIST_HAS (PLAY_ID,SONG_ID) VALUES (1,'4tumvaMdzYcKksCJacspV0');
INSERT INTO PLAYLIST_HAS (PLAY_ID,SONG_ID) VALUES (1,'36OgLayLn0PN1tcJ8gneLD');
INSERT INTO PLAYLIST_HAS (PLAY_ID,SONG_ID) VALUES (1,'6z4hLk5Lq6JSIHDNGK9HW8');
INSERT INTO PLAYLIST_HAS (PLAY_ID,SONG_ID) VALUES (1,'6DifPvqyEMk6zj0uDvcOpl');


track={
            'song_name':mtr.song_name,
            'song_id':mtr.song_id
        }
artists=['art1','art2']
alter table playlist_has add column TRACK_NO INTEGER;

CREATE TABLE CURRENT_PLAYING(
	EMAIL VARCHAR(255),
 	FOREIGN KEY(EMAIL) REFERENCES USERS(EMAIL) ON DELETE CASCADE,
	SONG_ID VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci,
	FOREIGN KEY (SONG_ID) REFERENCES SONG(SONG_ID) ON DELETE CASCADE,
	PRIMARY KEY(EMAIL,SONG_ID)
);

INSERT INTO CURRENTLY_PLAYING (EMAIL,SONG_ID) VALUES ('hello','4tumvaMdzYcKksCJacspV0');







DELIMITER //
CREATE TRIGGER update_total_tracks
AFTER INSERT ON PLAYLIST_HAS
FOR EACH ROW
BEGIN
    DECLARE playlist_id INT UNSIGNED;
    DECLARE total_tracks INT;

    -- Get the playlist ID for the newly inserted song
    SELECT PLAY_ID INTO playlist_id FROM PLAYLIST WHERE PLAY_ID = NEW.PLAY_ID;

    -- Count the total number of tracks in the playlist
    SELECT COUNT(*) INTO total_tracks FROM PLAYLIST_HAS WHERE PLAY_ID = playlist_id;

    -- Update the TOTAL_TRACKS column in the PLAYLIST table
    UPDATE PLAYLIST SET TOTAL_TRACKS = total_tracks WHERE PLAY_ID = playlist_id;
END //
DELIMITER ;






DELIMITER //
CREATE TRIGGER create_dummy_playlist_and_currently_playing
AFTER INSERT ON USERS
FOR EACH ROW
BEGIN
    
	DECLARE dummy_playlist_id INT UNSIGNED;
    DECLARE dummy_song_id VARCHAR(50);

    -- Insert dummy playlist for the new user
    INSERT INTO PLAYLIST (EMAIL, TOTAL_TRACKS, PLAY_NAME) VALUES (NEW.EMAIL, 1, 'Dummy Playlist');
    SET dummy_playlist_id = LAST_INSERT_ID(); -- Get the ID of the newly inserted playlist

    -- Insert dummy song into the playlist
    INSERT INTO PLAYLIST_HAS (PLAY_ID, SONG_ID, TRACK_NO) VALUES (dummy_playlist_id, '5txoZyuAmtCfmDjUCEphWm', 1);

    -- Set currently_playing of the user to the dummy song
    INSERT INTO CURRENT_PLAYING (EMAIL, SONG_ID) VALUES (NEW.EMAIL, '5txoZyuAmtCfmDjUCEphWm');
END //
DELIMITER ;

